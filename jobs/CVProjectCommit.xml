<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
      <projectUrl>https://github.com/mfuroyama/project-flow-test/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.1.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/mfuroyama/project-flow-test</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/cv/*/dev</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>*/cv/*/test/*</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>*/cv/*/prod/*</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>*/cv/*/release</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GithubWeb">
      <url>https://github.com/mfuroyama/project-flow-test</url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.29.5">
      <spec></spec>
    </com.cloudbees.jenkins.GitHubPushTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo BRANCH_MODULE=$(echo $GIT_BRANCH | cut -d&apos;/&apos; -f 3) &gt; cv-build.properties
echo BRANCH_ENVIRONMENT=$(echo $GIT_BRANCH | cut -d&apos;/&apos; -f 4) &gt;&gt; cv-build.properties
echo BRANCH_VERSION=$(echo $GIT_BRANCH | cut -d&apos;/&apos; -f 5) &gt;&gt; cv-build.properties</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>cv-build.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>echo &quot;Placeholder for $BRANCH_MODULE unit tests runner ($BRANCH_ENVIRONMENT)&quot;</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.2"/>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.36">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs>
              <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                <properties>CV_BRANCH=$GIT_BRANCH
CV_URL=$GIT_URL
CV_COMMIT=$GIT_COMMIT
CV_MODULE=$BRANCH_MODULE
CV_ENVIRONMENT=$BRANCH_ENVIRONMENT
CV_VERSION=$BRANCH_VERSION
CV_CREDENTIALS_ID=$CREDENTIALS_ID</properties>
                <textParamValueOnNewLine>false</textParamValueOnNewLine>
              </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
            </configs>
            <projects>onBuildPipeline</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <triggerFromChildProjects>false</triggerFromChildProjects>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Or" plugin="run-condition@1.2">
        <conditions>
          <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
              <arg1>$BRANCH_ENVIRONMENT</arg1>
              <arg2>test</arg2>
              <ignoreCase>true</ignoreCase>
            </condition>
          </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
          <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
              <arg1>$BRANCH_ENVIRONMENT</arg1>
              <arg2>prod</arg2>
              <ignoreCase>true</ignoreCase>
            </condition>
          </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
          <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
              <arg1>$BRANCH_ENVIRONMENT</arg1>
              <arg2>release</arg2>
              <ignoreCase>true</ignoreCase>
            </condition>
          </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
        </conditions>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>echo &apos;Collect Git commit messages for deployment release notes&apos;
git log --pretty=format:&quot;[%cd] %h (Author: %an, Committer: %cn): %s&quot; HEAD~1...HEAD &gt; commit-messages.txt
echo &apos;\n=== Commit Graph ===&apos; &gt;&gt; commit-messages.txt
git log --pretty=format:&quot;%h %s&quot; --graph HEAD~1...HEAD &gt;&gt; commit-messages.txt</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater plugin="build-name-setter@2.0.4">
      <buildName>version.txt</buildName>
      <macroTemplate>#${BUILD_NUMBER} ${BRANCH_MODULE} ${BRANCH_ENVIRONMENT} ${BRANCH_VERSION}</macroTemplate>
      <fromFile>false</fromFile>
      <fromMacro>true</fromMacro>
      <macroFirst>false</macroFirst>
    </org.jenkinsci.plugins.buildnameupdater.BuildNameUpdater>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.2">
        <arg1>$BRANCH_ENVIRONMENT</arg1>
        <arg2>test</arg2>
        <ignoreCase>false</ignoreCase>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command># Check if commit came from /cv/${BRANCH_MODULE}/dev
# If not, then merge back into /cv/${BRANCH_MODULE}/dev 
COMMIT_MESSAGE=$(git log --pretty=format:&quot;%s&quot; -1)

echo &quot;Merge ${GIT_BRANCH} back into cv/${BRANCH_MODULE}/dev if the last commit wasn&apos;t a merge from dev&quot;
echo ${COMMIT_MESSAGE}</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.2"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>commit-messages.txt</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.20">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>HRG_GITHUB_REPO_CREDENTIALS_ID</credentialsId>
          <variable>CREDENTIALS_ID</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>